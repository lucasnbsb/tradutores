/* The following code was generated by JFlex 1.4_pre3 on 11/25/13 7:25 PM */

import node.Constants;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4_pre3
 * on 11/25/13 7:25 PM from the specification file
 * <tt>file:/home/lucas/Desktop/tradutores-master/flex/Scanner.jflex</tt>
 */
class Lexer implements java_cup.runtime.Scanner, sym, Constants {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int YY_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] yycmap = {
    35, 35, 35, 35, 35, 35, 35, 35, 35, 46, 44,  0, 46, 43, 35, 35, 
    35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,  0,  0,  0,  0, 
    46, 36, 23,  0, 47, 33, 27,  0, 50, 51, 25, 26, 52, 24, 22, 25, 
    21, 21, 21, 21, 21, 21, 21, 21, 21, 21,  0, 45, 31, 29, 32,  0, 
     0, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
    34, 34, 34, 38, 34, 34, 34, 34, 34, 34, 34, 41,  0, 42, 30, 34, 
     0,  3, 13,  1, 15,  8, 10, 40, 17,  5, 34, 20,  2, 12,  6, 18, 
    16, 34,  9,  4,  7, 11, 37, 19, 14, 39, 34, 48, 28, 49,  0, 35
  };


  /** 
   * Translates a state to a row index in the transition table (packed version)
   */
  final private static String yy_rowMap_packed = 
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173\0\u01a8\0\u01dd"+
    "\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef"+
    "\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u0424\0\u04f8"+
    "\0\u05cc\0\u0601\0\65\0\65\0\u0636\0\65\0\65\0\u066b\0\65\0\65"+
    "\0\65\0\65\0\65\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de"+
    "\0\u0813\0\u0848\0\u027c\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb"+
    "\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd"+
    "\0\u0c02\0\u0c37\0\u03ba\0\65\0\65\0\65\0\65\0\65\0\u052d\0\u0c6c"+
    "\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u066b\0\u0ddf\0\u0e14\0\u0e49"+
    "\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u027c\0\u0ff1\0\u1026"+
    "\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238"+
    "\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u0c37\0\u1341\0\u1376\0\u13ab\0\u0d75\0\u13e0"+
    "\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd"+
    "\0\u027c\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a"+
    "\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u027c\0\u18d8\0\u190d\0\u1942\0\u1977"+
    "\0\65\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u027c\0\u027c\0\u1a80\0\u1ab5\0\u1aea"+
    "\0\u1b1f\0\u1b54\0\u027c\0\u1b89\0\u1bbe\0\u027c\0\u1bf3\0\u1c28\0\u027c\0\u027c"+
    "\0\u1c5d\0\u1c92\0\u1cc7\0\u027c\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05"+
    "\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u0e7e";

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int [] yy_rowMap = yy_unpack_rowMap(yy_rowMap_packed);


  /** 
   * Unpacks the compressed row translation table.
   *
   * @param packed   the packed row translation table
   * @return         the unpacked row translation table
   */
  private static int [] yy_unpack_rowMap(String packed) {
    int [] map = new int[380];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 380) {
      int high = ((int) packed.charAt(i++)) << 16;
      map[j++] = high | packed.charAt(i++);
    }
    return map;
  }
  /** 
   * The packed transition table of the DFA (part 0)
   */
  private static final String yy_packed0 = 
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\2\15\1\16\1\15\1\17\1\20"+
    "\2\15\1\21\1\15\1\22\1\2\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\15\1\2\1\36\1\37\1\40\2\15\1\41\1\42"+
    "\1\43\1\44\1\45\1\44\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\66\0\1\15\1\54\1\55\15\15\1\56"+
    "\4\15\1\57\13\0\2\15\1\0\4\15\6\0\1\15"+
    "\6\0\21\15\1\60\3\15\1\57\13\0\2\15\1\0"+
    "\4\15\6\0\1\15\6\0\14\15\1\61\10\15\1\57"+
    "\13\0\2\15\1\0\4\15\6\0\1\15\6\0\6\15"+
    "\1\62\13\15\1\63\2\15\1\57\13\0\2\15\1\0"+
    "\4\15\6\0\1\15\6\0\5\15\1\64\3\15\1\65"+
    "\1\15\1\66\11\15\1\57\13\0\2\15\1\0\4\15"+
    "\6\0\1\15\6\0\7\15\1\67\15\15\1\57\13\0"+
    "\2\15\1\0\4\15\6\0\1\15\6\0\10\15\1\70"+
    "\7\15\1\71\4\15\1\57\13\0\2\15\1\0\4\15"+
    "\6\0\1\15\6\0\1\15\1\55\3\15\1\72\7\15"+
    "\1\73\7\15\1\57\13\0\2\15\1\0\4\15\6\0"+
    "\1\15\6\0\7\15\1\74\15\15\1\57\13\0\2\15"+
    "\1\0\4\15\6\0\1\15\6\0\1\15\1\75\1\76"+
    "\1\15\1\77\14\15\1\100\3\15\1\57\13\0\2\15"+
    "\1\0\4\15\6\0\1\15\6\0\25\15\1\57\13\0"+
    "\2\15\1\0\4\15\6\0\1\15\6\0\10\15\1\101"+
    "\10\15\1\102\3\15\1\57\13\0\2\15\1\0\4\15"+
    "\6\0\1\15\6\0\7\15\1\103\11\15\1\104\3\15"+
    "\1\57\13\0\2\15\1\0\4\15\6\0\1\15\6\0"+
    "\10\15\1\105\1\15\1\106\12\15\1\57\13\0\2\15"+
    "\1\0\4\15\6\0\1\15\6\0\20\15\1\107\4\15"+
    "\1\57\13\0\2\15\1\0\4\15\6\0\1\15\32\0"+
    "\1\22\1\110\36\0\27\111\1\112\35\111\30\0\1\113"+
    "\4\0\1\114\64\0\1\114\61\0\1\113\2\0\1\114"+
    "\62\0\1\115\1\0\1\115\63\0\2\115\64\0\1\116"+
    "\64\0\1\115\64\0\1\116\1\0\1\117\62\0\1\116"+
    "\2\0\1\120\25\0\21\15\1\121\3\15\1\57\13\0"+
    "\2\15\1\0\4\15\6\0\1\15\6\0\6\15\1\122"+
    "\16\15\1\57\13\0\2\15\1\0\2\15\1\123\1\15"+
    "\6\0\1\15\61\0\1\124\10\0\1\125\25\46\1\126"+
    "\13\125\2\46\1\125\4\46\3\125\1\0\2\125\1\127"+
    "\5\125\1\0\2\15\1\130\22\15\1\57\13\0\2\15"+
    "\1\0\4\15\6\0\1\15\6\0\3\15\1\131\21\15"+
    "\1\57\13\0\2\15\1\0\4\15\6\0\1\15\6\0"+
    "\2\15\1\132\22\15\1\57\13\0\2\15\1\0\4\15"+
    "\6\0\1\15\6\0\24\133\15\0\1\133\2\0\4\133"+
    "\6\0\1\133\6\0\5\15\1\134\17\15\1\57\13\0"+
    "\2\15\1\0\4\15\6\0\1\15\6\0\3\15\1\135"+
    "\21\15\1\57\13\0\2\15\1\0\4\15\6\0\1\15"+
    "\6\0\2\15\1\136\22\15\1\57\13\0\2\15\1\0"+
    "\4\15\6\0\1\15\6\0\4\15\1\137\20\15\1\57"+
    "\13\0\2\15\1\0\4\15\6\0\1\15\6\0\6\15"+
    "\1\140\16\15\1\57\13\0\2\15\1\0\4\15\6\0"+
    "\1\15\6\0\17\15\1\141\5\15\1\57\13\0\2\15"+
    "\1\0\4\15\6\0\1\15\6\0\22\15\1\142\2\15"+
    "\1\57\13\0\2\15\1\0\4\15\6\0\1\15\6\0"+
    "\12\15\1\143\12\15\1\57\13\0\2\15\1\0\4\15"+
    "\6\0\1\15\6\0\4\15\1\144\3\15\1\145\14\15"+
    "\1\57\13\0\2\15\1\0\4\15\6\0\1\15\6\0"+
    "\12\15\1\146\12\15\1\57\13\0\2\15\1\0\4\15"+
    "\6\0\1\15\6\0\6\15\1\147\16\15\1\57\13\0"+
    "\2\15\1\0\4\15\6\0\1\15\6\0\6\15\1\150"+
    "\16\15\1\57\13\0\2\15\1\0\4\15\6\0\1\15"+
    "\6\0\21\15\1\151\3\15\1\57\13\0\2\15\1\0"+
    "\4\15\6\0\1\15\6\0\1\15\1\152\23\15\1\57"+
    "\13\0\2\15\1\0\4\15\6\0\1\15\6\0\5\15"+
    "\1\153\17\15\1\57\13\0\2\15\1\0\4\15\6\0"+
    "\1\15\6\0\10\15\1\142\14\15\1\57\13\0\2\15"+
    "\1\0\4\15\6\0\1\15\6\0\7\15\1\154\15\15"+
    "\1\57\13\0\2\15\1\0\4\15\6\0\1\15\6\0"+
    "\21\15\1\155\3\15\1\57\13\0\2\15\1\0\4\15"+
    "\6\0\1\15\6\0\11\15\1\156\13\15\1\57\13\0"+
    "\2\15\1\0\4\15\6\0\1\15\6\0\12\15\1\157"+
    "\12\15\1\57\13\0\2\15\1\0\4\15\6\0\1\15"+
    "\6\0\4\15\1\160\20\15\1\57\13\0\2\15\1\0"+
    "\4\15\6\0\1\15\6\0\14\15\1\161\10\15\1\57"+
    "\13\0\2\15\1\0\4\15\6\0\1\15\6\0\4\15"+
    "\1\162\20\15\1\57\13\0\2\15\1\0\4\15\6\0"+
    "\1\15\32\0\1\163\74\0\1\115\2\0\1\117\25\0"+
    "\4\15\1\164\20\15\1\57\13\0\2\15\1\0\4\15"+
    "\6\0\1\15\6\0\10\15\1\165\14\15\1\57\13\0"+
    "\2\15\1\0\4\15\6\0\1\15\6\0\3\15\1\166"+
    "\21\15\1\57\13\0\2\15\1\0\4\15\6\0\1\15"+
    "\62\0\1\44\7\0\54\125\1\0\2\125\1\167\6\125"+
    "\24\170\15\125\1\170\2\125\4\170\3\125\1\0\2\125"+
    "\1\171\5\125\1\0\3\15\1\172\21\15\1\57\13\0"+
    "\2\15\1\0\4\15\6\0\1\15\6\0\7\15\1\142"+
    "\15\15\1\57\13\0\2\15\1\0\4\15\6\0\1\15"+
    "\6\0\10\15\1\173\14\15\1\57\13\0\2\15\1\0"+
    "\4\15\6\0\1\15\6\0\25\133\1\57\13\0\2\133"+
    "\1\0\4\133\6\0\1\133\6\0\25\15\1\57\13\0"+
    "\2\15\1\0\3\15\1\173\6\0\1\15\6\0\6\15"+
    "\1\174\16\15\1\57\13\0\2\15\1\0\4\15\6\0"+
    "\1\15\6\0\6\15\1\175\16\15\1\57\13\0\2\15"+
    "\1\0\4\15\6\0\1\15\6\0\6\15\1\176\16\15"+
    "\1\57\13\0\2\15\1\0\4\15\6\0\1\15\6\0"+
    "\7\15\1\177\15\15\1\57\13\0\2\15\1\0\4\15"+
    "\1\200\5\0\1\15\6\0\1\15\1\201\17\15\1\202"+
    "\3\15\1\57\13\0\2\15\1\0\4\15\6\0\1\15"+
    "\6\0\7\15\1\203\15\15\1\57\13\0\2\15\1\0"+
    "\4\15\6\0\1\15\6\0\3\15\1\142\21\15\1\57"+
    "\13\0\2\15\1\0\4\15\6\0\1\15\6\0\21\15"+
    "\1\204\3\15\1\57\13\0\2\15\1\0\4\15\6\0"+
    "\1\15\6\0\13\15\1\142\11\15\1\57\13\0\2\15"+
    "\1\0\4\15\6\0\1\15\6\0\7\15\1\205\15\15"+
    "\1\57\13\0\2\15\1\0\4\15\6\0\1\15\6\0"+
    "\12\15\1\206\12\15\1\57\13\0\2\15\1\0\4\15"+
    "\6\0\1\15\6\0\2\15\1\207\22\15\1\57\13\0"+
    "\2\15\1\0\4\15\6\0\1\15\6\0\3\15\1\210"+
    "\21\15\1\57\13\0\2\15\1\0\4\15\6\0\1\15"+
    "\6\0\2\15\1\211\22\15\1\57\13\0\2\15\1\0"+
    "\4\15\6\0\1\15\6\0\2\15\1\212\22\15\1\57"+
    "\13\0\2\15\1\0\4\15\6\0\1\15\6\0\1\15"+
    "\1\213\23\15\1\57\13\0\2\15\1\0\4\15\6\0"+
    "\1\15\6\0\2\15\1\214\22\15\1\57\13\0\2\15"+
    "\1\0\4\15\6\0\1\15\6\0\14\15\1\215\10\15"+
    "\1\57\13\0\2\15\1\0\4\15\6\0\1\15\6\0"+
    "\25\15\1\57\13\0\2\15\1\0\1\216\3\15\6\0"+
    "\1\15\6\0\1\15\1\217\23\15\1\57\13\0\2\15"+
    "\1\0\4\15\6\0\1\15\6\0\1\15\1\220\23\15"+
    "\1\57\13\0\2\15\1\0\4\15\6\0\1\15\6\0"+
    "\16\15\1\173\6\15\1\57\13\0\2\15\1\0\4\15"+
    "\6\0\1\15\6\0\4\15\1\60\20\15\1\57\13\0"+
    "\2\15\1\0\4\15\6\0\1\15\6\0\6\15\1\221"+
    "\16\15\1\57\13\0\2\15\1\0\4\15\6\0\1\15"+
    "\5\0\1\125\25\170\1\126\13\125\2\170\1\125\4\170"+
    "\3\125\1\0\2\125\1\171\5\125\1\0\3\15\1\222"+
    "\21\15\1\57\13\0\2\15\1\0\4\15\6\0\1\15"+
    "\6\0\25\15\1\57\13\0\2\15\1\0\4\15\1\200"+
    "\5\0\1\15\6\0\10\15\1\223\14\15\1\57\13\0"+
    "\2\15\1\0\4\15\6\0\1\15\6\0\4\15\1\224"+
    "\20\15\1\57\13\0\2\15\1\0\4\15\6\0\1\15"+
    "\6\0\1\225\24\15\1\57\13\0\2\15\1\0\4\15"+
    "\6\0\1\15\6\0\10\15\1\226\14\15\1\57\13\0"+
    "\2\15\1\0\4\15\6\0\1\15\57\0\1\227\13\0"+
    "\7\15\1\230\15\15\1\57\13\0\2\15\1\0\4\15"+
    "\6\0\1\15\6\0\10\15\1\231\14\15\1\57\13\0"+
    "\2\15\1\0\4\15\6\0\1\15\6\0\22\15\1\144"+
    "\2\15\1\57\13\0\2\15\1\0\4\15\6\0\1\15"+
    "\6\0\5\15\1\232\17\15\1\57\13\0\2\15\1\0"+
    "\4\15\6\0\1\15\6\0\10\15\1\233\14\15\1\57"+
    "\13\0\2\15\1\0\4\15\6\0\1\15\6\0\6\15"+
    "\1\173\16\15\1\57\13\0\2\15\1\0\4\15\6\0"+
    "\1\15\6\0\7\15\1\234\15\15\1\57\13\0\2\15"+
    "\1\0\4\15\6\0\1\15\6\0\1\15\1\142\23\15"+
    "\1\57\13\0\2\15\1\0\4\15\6\0\1\15\6\0"+
    "\23\15\1\235\1\15\1\57\13\0\2\15\1\0\4\15"+
    "\6\0\1\15\6\0\7\15\1\236\15\15\1\57\13\0"+
    "\2\15\1\0\4\15\6\0\1\15\6\0\12\15\1\237"+
    "\12\15\1\57\13\0\2\15\1\0\4\15\6\0\1\15"+
    "\6\0\1\15\1\240\23\15\1\57\13\0\2\15\1\0"+
    "\4\15\6\0\1\15\6\0\2\15\1\241\22\15\1\57"+
    "\13\0\2\15\1\0\4\15\6\0\1\15\6\0\4\15"+
    "\1\242\20\15\1\57\13\0\2\15\1\0\4\15\6\0"+
    "\1\15\6\0\7\15\1\243\15\15\1\57\13\0\2\15"+
    "\1\0\4\15\6\0\1\15\6\0\7\15\1\244\15\15"+
    "\1\57\13\0\2\15\1\0\4\15\6\0\1\15\6\0"+
    "\2\15\1\245\22\15\1\57\13\0\2\15\1\0\4\15"+
    "\6\0\1\15\6\0\1\246\24\15\1\57\13\0\2\15"+
    "\1\0\4\15\6\0\1\15\6\0\20\15\1\142\4\15"+
    "\1\57\13\0\2\15\1\0\4\15\6\0\1\15\6\0"+
    "\11\15\1\247\13\15\1\57\13\0\2\15\1\0\4\15"+
    "\6\0\1\15\6\0\13\15\1\250\11\15\1\57\13\0"+
    "\2\15\1\0\4\15\6\0\1\15\6\0\6\15\1\251"+
    "\16\15\1\57\13\0\2\15\1\0\4\15\6\0\1\15"+
    "\6\0\16\15\1\144\6\15\1\57\13\0\2\15\1\0"+
    "\4\15\6\0\1\15\6\0\5\15\1\252\17\15\1\57"+
    "\13\0\2\15\1\0\4\15\6\0\1\15\6\0\2\15"+
    "\1\253\22\15\1\57\13\0\2\15\1\0\4\15\6\0"+
    "\1\15\6\0\1\15\1\254\23\15\1\57\13\0\2\15"+
    "\1\0\4\15\6\0\1\15\6\0\7\15\1\173\15\15"+
    "\1\57\13\0\2\15\1\0\4\15\6\0\1\15\6\0"+
    "\6\15\1\255\16\15\1\57\13\0\2\15\1\0\4\15"+
    "\6\0\1\15\6\0\1\256\24\15\1\57\13\0\2\15"+
    "\1\0\4\15\6\0\1\15\6\0\13\15\1\257\11\15"+
    "\1\57\13\0\2\15\1\0\4\15\6\0\1\15\6\0"+
    "\1\254\24\15\1\57\13\0\2\15\1\0\4\15\6\0"+
    "\1\15\6\0\2\15\1\260\22\15\1\57\13\0\2\15"+
    "\1\0\4\15\6\0\1\15\6\0\7\15\1\261\15\15"+
    "\1\57\13\0\2\15\1\0\4\15\6\0\1\15\6\0"+
    "\5\15\1\173\17\15\1\57\13\0\2\15\1\0\4\15"+
    "\6\0\1\15\6\0\6\15\1\142\16\15\1\57\13\0"+
    "\2\15\1\0\4\15\6\0\1\15\6\0\7\15\1\256"+
    "\15\15\1\57\13\0\2\15\1\0\4\15\6\0\1\15"+
    "\6\0\25\15\1\262\13\0\2\15\1\0\4\15\6\0"+
    "\1\15\6\0\1\131\24\15\1\57\13\0\2\15\1\0"+
    "\4\15\6\0\1\15\6\0\5\15\1\263\17\15\1\57"+
    "\13\0\2\15\1\0\4\15\6\0\1\15\6\0\21\133"+
    "\1\264\2\133\15\0\1\133\2\0\4\133\6\0\1\133"+
    "\6\0\6\15\1\144\16\15\1\57\13\0\2\15\1\0"+
    "\4\15\6\0\1\15\6\0\12\133\1\265\12\133\1\57"+
    "\13\0\2\133\1\0\4\133\6\0\1\133\6\0\6\133"+
    "\1\266\16\133\1\57\13\0\2\133\1\0\4\133\6\0"+
    "\1\133\6\0\25\133\1\267\13\0\2\133\1\0\4\133"+
    "\6\0\1\133\6\0\17\133\1\270\4\133\15\0\1\133"+
    "\2\0\4\133\6\0\1\133\6\0\10\133\1\271\14\133"+
    "\1\57\13\0\2\133\1\0\4\133\6\0\1\133\6\0"+
    "\4\133\1\272\20\133\1\57\13\0\2\133\1\0\4\133"+
    "\6\0\1\133\6\0\5\133\1\273\17\133\1\57\13\0"+
    "\2\133\1\0\4\133\6\0\1\133\6\0\6\133\1\274"+
    "\16\133\1\57\13\0\2\133\1\0\4\133\6\0\1\133"+
    "\6\0\1\133\1\275\23\133\1\57\13\0\2\133\1\0"+
    "\4\133\6\0\1\133\6\0\5\133\1\276\17\133\1\57"+
    "\13\0\2\133\1\0\4\133\6\0\1\133\5\0";

  /** 
   * The transition table of the DFA
   */
  private static final int yytrans [] = yy_unpack();


  /* error codes */
  private static final int YY_UNKNOWN_ERROR = 0;
  private static final int YY_ILLEGAL_STATE = 1;
  private static final int YY_NO_MATCH = 2;
  private static final int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  private static final String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final byte YY_ATTRIBUTE[] = {
     0,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     9,  9,  1,  9,  9,  1,  9,  9,  9,  9,  9,  1,  1,  1,  0,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  0,  0,  9,  9,  9,  9,  9,  0,  0, 
     1,  1,  1,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  0,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */

  private Symbol symbol(int sym) {
    return new Symbol(sym, yyline+1, yycolumn+1);
  }
  
  private Symbol symbol(int sym, Object val) {
    return new Symbol(sym, yyline+1, yycolumn+1, val);
  }
  
  private void error(String message) {
    System.out.println("Error at line "+(yyline+1)+", column "+(yycolumn+1)+" : "+message);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[8215];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 97: 
          { return symbol( KEYWORD,yytext()); }
        case 191: break;
        case 36: 
          { return symbol( DELIM,yytext()); }
        case 192: break;
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 30: 
        case 31: 
        case 37: 
        case 43: 
        case 44: 
        case 45: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 80: 
        case 81: 
        case 82: 
        case 87: 
        case 88: 
        case 89: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 96: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 115: 
        case 116: 
        case 117: 
        case 121: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 128: 
        case 129: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 163: 
        case 164: 
        case 166: 
        case 167: 
        case 170: 
        case 171: 
        case 172: 
        case 174: 
        case 175: 
        case 176: 
        case 178: 
          { return symbol(IDENT, yytext()); }
        case 193: break;
        case 42: 
          { return symbol( COMMA,yytext()); }
        case 194: break;
        case 165: 
          { return symbol( STATIC_KEYWORD,yytext()); }
        case 195: break;
        case 1: 
        case 18: 
        case 22: 
        case 23: 
        case 25: 
        case 28: 
          {   /* throw new Error("Illegal character <"+ yytext()+">");*/
        error("Illegal character <"+ yytext()+">");
                   }
        case 196: break;
        case 29: 
          { return symbol( NEG,yytext()); }
        case 197: break;
        case 95: 
        case 122: 
          {  return symbol(TYPE,yytext());  }
        case 198: break;
        case 17: 
          { return symbol( INT_NUMBER,yytext()); }
        case 199: break;
        case 73: 
          {  return symbol( STRING_LITERAL,yytext()); }
        case 200: break;
        case 169: 
          {  return symbol(RETURN_KEYWORD,yytext()); }
        case 201: break;
        case 156: 
          {  return symbol(BREAK_KEYWORD,yytext()); }
        case 202: break;
        case 19: 
        case 20: 
          { return symbol( EXP_OP,yytext()); }
        case 203: break;
        case 52: 
          { return symbol( KEYWORD_IF,yytext()); }
        case 204: break;
        case 21: 
          { return symbol( PLUSSIGN,yytext()); }
        case 205: break;
        case 74: 
          { return symbol( UN_OP,yytext()); }
        case 206: break;
        case 168: 
          { return symbol( IMPORT_KEYWORD,yytext()); }
        case 207: break;
        case 24: 
        case 75: 
          { return symbol( ASS_OP,yytext()); }
        case 208: break;
        case 189: 
          { return symbol(PRINT, yytext()); }
        case 209: break;
        case 41: 
          { return symbol( RPAR,yytext()); }
        case 210: break;
        case 39: 
          { return symbol( RCOL,yytext()); }
        case 211: break;
        case 33: 
          { return symbol( RKEY,yytext()); }
        case 212: break;
        case 173: 
          {  return symbol(ACCESS,yytext()); }
        case 213: break;
        case 150: 
          {  return symbol(VECT_TYPE,yytext()); }
        case 214: break;
        case 26: 
        case 27: 
        case 77: 
          { return symbol( COMP_OP,yytext()); }
        case 215: break;
        case 76: 
          { return symbol( LOG_OP,yytext()); }
        case 216: break;
        case 145: 
          { return symbol( KEYWORD_CLASS,yytext()); }
        case 217: break;
        case 162: 
          { return symbol( KEYWORD_WHILE,yytext()); }
        case 218: break;
        case 34: 
        case 35: 
          {  }
        case 219: break;
        case 40: 
          { return symbol( LPAR,yytext()); }
        case 220: break;
        case 38: 
          { return symbol( LCOL,yytext()); }
        case 221: break;
        case 32: 
          { return symbol( LKEY,yytext()); }
        case 222: break;
        case 86: 
        case 118: 
        case 120: 
          { return symbol(CODE_LITERAL, yytext()); }
        case 223: break;
        case 90: 
        case 119: 
        case 179: 
        case 180: 
        case 181: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
          { return symbol(QUALIFIED,yytext()); }
        case 224: break;
        case 114: 
          { return symbol( REAL_NUMBER,yytext()); }
        case 225: break;
        case 130: 
          { return symbol( BOL_TRUE,yytext()); }
        case 226: break;
        case 155: 
          { return symbol( BOL_FALSE,yytext()); }
        case 227: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
