/* The following code was generated by JFlex 1.4_pre3 on 11/25/13 5:43 PM */

import node.Constants;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4_pre3
 * on 11/25/13 5:43 PM from the specification file
 * <tt>file:/home/lucas/Desktop/tradutores-master/flex/Scanner.jflex</tt>
 */
class Lexer implements java_cup.runtime.Scanner, sym, Constants {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int YY_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] yycmap = {
    35, 35, 35, 35, 35, 35, 35, 35, 35, 46, 44,  0, 46, 43, 35, 35, 
    35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,  0,  0,  0,  0, 
    46, 36, 23,  0, 47, 33, 27,  0, 50, 51, 25, 26, 52, 24, 22, 25, 
    21, 21, 21, 21, 21, 21, 21, 21, 21, 21,  0, 45, 31, 29, 32,  0, 
     0, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
    34, 34, 34, 38, 34, 34, 34, 34, 34, 34, 34, 41,  0, 42, 30, 34, 
     0,  3, 13,  1, 15,  8, 10, 40, 17,  5, 34, 20,  2, 12,  6, 18, 
    16, 34,  9,  4,  7, 11, 37, 19, 14, 39, 34, 48, 28, 49,  0, 35
  };


  /** 
   * Translates a state to a row index in the transition table (packed version)
   */
  final private static String yy_rowMap_packed = 
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173\0\u01a8\0\u01dd"+
    "\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef"+
    "\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u03ef\0\u04c3\0\u0597"+
    "\0\u05cc\0\65\0\65\0\u0601\0\65\0\65\0\u0636\0\65\0\65\0\65"+
    "\0\65\0\65\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de"+
    "\0\u0813\0\u0212\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb"+
    "\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd"+
    "\0\u0385\0\65\0\65\0\65\0\65\0\65\0\u04f8\0\u0c02\0\u0c37\0\u0c6c"+
    "\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0636\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49"+
    "\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0212\0\u0f87\0\u0fbc\0\u0ff1\0\u1026"+
    "\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238"+
    "\0\u126d\0\u0bcd\0\u12a2\0\u12d7\0\u130c\0\u0d0b\0\u1341\0\u1341\0\u1376\0\u13ab"+
    "\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u0212\0\u1553\0\u1588"+
    "\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a"+
    "\0\u17cf\0\u0212\0\u1804\0\u1839\0\u186e\0\u18a3\0\65\0\u18d8\0\u190d\0\u1942"+
    "\0\u0212\0\u0212\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u0212\0\u1a80\0\u1ab5"+
    "\0\u0212\0\u1aea\0\u1b1f\0\u0212\0\u1b54\0\u1b89\0\u1bbe\0\u0212\0\u1bf3\0\u1c28"+
    "\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a"+
    "\0\u1e6f\0\u1ea4\0\u1ed9\0\u0e14";

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int [] yy_rowMap = yy_unpack_rowMap(yy_rowMap_packed);


  /** 
   * Unpacks the compressed row translation table.
   *
   * @param packed   the packed row translation table
   * @return         the unpacked row translation table
   */
  private static int [] yy_unpack_rowMap(String packed) {
    int [] map = new int[368];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 368) {
      int high = ((int) packed.charAt(i++)) << 16;
      map[j++] = high | packed.charAt(i++);
    }
    return map;
  }
  /** 
   * The packed transition table of the DFA (part 0)
   */
  private static final String yy_packed0 = 
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\2\13\1\15\1\13\1\16\1\17"+
    "\2\13\1\20\1\13\1\21\1\2\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\13\1\2\1\35\1\36\1\37\2\13\1\40\1\41"+
    "\1\42\1\43\1\44\1\43\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\66\0\1\13\1\53\1\54\15\13\1\55"+
    "\4\13\1\56\13\0\2\13\1\0\4\13\6\0\1\13"+
    "\6\0\21\13\1\57\3\13\1\56\13\0\2\13\1\0"+
    "\4\13\6\0\1\13\6\0\14\13\1\60\10\13\1\56"+
    "\13\0\2\13\1\0\4\13\6\0\1\13\6\0\6\13"+
    "\1\61\13\13\1\62\2\13\1\56\13\0\2\13\1\0"+
    "\4\13\6\0\1\13\6\0\5\13\1\63\3\13\1\64"+
    "\1\13\1\65\11\13\1\56\13\0\2\13\1\0\4\13"+
    "\6\0\1\13\6\0\7\13\1\66\15\13\1\56\13\0"+
    "\2\13\1\0\4\13\6\0\1\13\6\0\10\13\1\67"+
    "\7\13\1\70\4\13\1\56\13\0\2\13\1\0\4\13"+
    "\6\0\1\13\6\0\1\13\1\54\3\13\1\71\7\13"+
    "\1\72\7\13\1\56\13\0\2\13\1\0\4\13\6\0"+
    "\1\13\6\0\25\13\1\56\13\0\2\13\1\0\4\13"+
    "\6\0\1\13\6\0\1\13\1\73\1\74\1\13\1\75"+
    "\14\13\1\76\3\13\1\56\13\0\2\13\1\0\4\13"+
    "\6\0\1\13\6\0\10\13\1\77\10\13\1\100\3\13"+
    "\1\56\13\0\2\13\1\0\4\13\6\0\1\13\6\0"+
    "\7\13\1\101\11\13\1\102\3\13\1\56\13\0\2\13"+
    "\1\0\4\13\6\0\1\13\6\0\10\13\1\103\1\13"+
    "\1\104\12\13\1\56\13\0\2\13\1\0\4\13\6\0"+
    "\1\13\6\0\20\13\1\105\4\13\1\56\13\0\2\13"+
    "\1\0\4\13\6\0\1\13\32\0\1\21\1\106\36\0"+
    "\27\107\1\110\35\107\30\0\1\111\4\0\1\112\64\0"+
    "\1\112\61\0\1\111\2\0\1\112\62\0\1\113\1\0"+
    "\1\113\63\0\2\113\64\0\1\114\64\0\1\113\64\0"+
    "\1\114\1\0\1\115\62\0\1\114\2\0\1\116\25\0"+
    "\21\13\1\117\3\13\1\56\13\0\2\13\1\0\4\13"+
    "\6\0\1\13\6\0\6\13\1\120\16\13\1\56\13\0"+
    "\2\13\1\0\2\13\1\121\1\13\6\0\1\13\61\0"+
    "\1\122\10\0\1\123\25\45\1\124\13\123\2\45\1\123"+
    "\4\45\3\123\1\0\2\123\1\125\5\123\1\0\2\13"+
    "\1\126\22\13\1\56\13\0\2\13\1\0\4\13\6\0"+
    "\1\13\6\0\3\13\1\127\21\13\1\56\13\0\2\13"+
    "\1\0\4\13\6\0\1\13\6\0\2\13\1\130\22\13"+
    "\1\56\13\0\2\13\1\0\4\13\6\0\1\13\6\0"+
    "\24\131\15\0\1\131\2\0\4\131\6\0\1\131\6\0"+
    "\5\13\1\132\17\13\1\56\13\0\2\13\1\0\4\13"+
    "\6\0\1\13\6\0\3\13\1\133\21\13\1\56\13\0"+
    "\2\13\1\0\4\13\6\0\1\13\6\0\2\13\1\134"+
    "\22\13\1\56\13\0\2\13\1\0\4\13\6\0\1\13"+
    "\6\0\4\13\1\135\20\13\1\56\13\0\2\13\1\0"+
    "\4\13\6\0\1\13\6\0\6\13\1\136\16\13\1\56"+
    "\13\0\2\13\1\0\4\13\6\0\1\13\6\0\17\13"+
    "\1\137\5\13\1\56\13\0\2\13\1\0\4\13\6\0"+
    "\1\13\6\0\22\13\1\140\2\13\1\56\13\0\2\13"+
    "\1\0\4\13\6\0\1\13\6\0\12\13\1\141\12\13"+
    "\1\56\13\0\2\13\1\0\4\13\6\0\1\13\6\0"+
    "\4\13\1\142\3\13\1\143\14\13\1\56\13\0\2\13"+
    "\1\0\4\13\6\0\1\13\6\0\12\13\1\144\12\13"+
    "\1\56\13\0\2\13\1\0\4\13\6\0\1\13\6\0"+
    "\6\13\1\145\16\13\1\56\13\0\2\13\1\0\4\13"+
    "\6\0\1\13\6\0\21\13\1\146\3\13\1\56\13\0"+
    "\2\13\1\0\4\13\6\0\1\13\6\0\1\13\1\147"+
    "\23\13\1\56\13\0\2\13\1\0\4\13\6\0\1\13"+
    "\6\0\5\13\1\150\17\13\1\56\13\0\2\13\1\0"+
    "\4\13\6\0\1\13\6\0\10\13\1\140\14\13\1\56"+
    "\13\0\2\13\1\0\4\13\6\0\1\13\6\0\7\13"+
    "\1\151\15\13\1\56\13\0\2\13\1\0\4\13\6\0"+
    "\1\13\6\0\21\13\1\152\3\13\1\56\13\0\2\13"+
    "\1\0\4\13\6\0\1\13\6\0\11\13\1\153\13\13"+
    "\1\56\13\0\2\13\1\0\4\13\6\0\1\13\6\0"+
    "\12\13\1\154\12\13\1\56\13\0\2\13\1\0\4\13"+
    "\6\0\1\13\6\0\4\13\1\155\20\13\1\56\13\0"+
    "\2\13\1\0\4\13\6\0\1\13\6\0\14\13\1\156"+
    "\10\13\1\56\13\0\2\13\1\0\4\13\6\0\1\13"+
    "\6\0\4\13\1\157\20\13\1\56\13\0\2\13\1\0"+
    "\4\13\6\0\1\13\32\0\1\160\74\0\1\113\2\0"+
    "\1\115\25\0\4\13\1\161\20\13\1\56\13\0\2\13"+
    "\1\0\4\13\6\0\1\13\6\0\10\13\1\162\14\13"+
    "\1\56\13\0\2\13\1\0\4\13\6\0\1\13\6\0"+
    "\3\13\1\163\21\13\1\56\13\0\2\13\1\0\4\13"+
    "\6\0\1\13\62\0\1\43\7\0\54\123\1\0\2\123"+
    "\1\164\6\123\24\165\15\123\1\165\2\123\4\165\3\123"+
    "\1\0\2\123\1\166\5\123\1\0\3\13\1\167\21\13"+
    "\1\56\13\0\2\13\1\0\4\13\6\0\1\13\6\0"+
    "\7\13\1\140\15\13\1\56\13\0\2\13\1\0\4\13"+
    "\6\0\1\13\6\0\10\13\1\170\14\13\1\56\13\0"+
    "\2\13\1\0\4\13\6\0\1\13\6\0\25\131\1\56"+
    "\13\0\2\131\1\0\4\131\6\0\1\131\6\0\25\13"+
    "\1\56\13\0\2\13\1\0\3\13\1\170\6\0\1\13"+
    "\6\0\6\13\1\171\16\13\1\56\13\0\2\13\1\0"+
    "\4\13\6\0\1\13\6\0\6\13\1\172\16\13\1\56"+
    "\13\0\2\13\1\0\4\13\6\0\1\13\6\0\6\13"+
    "\1\173\16\13\1\56\13\0\2\13\1\0\4\13\6\0"+
    "\1\13\6\0\7\13\1\174\15\13\1\56\13\0\2\13"+
    "\1\0\4\13\1\175\5\0\1\13\6\0\1\13\1\176"+
    "\17\13\1\177\3\13\1\56\13\0\2\13\1\0\4\13"+
    "\6\0\1\13\6\0\7\13\1\200\15\13\1\56\13\0"+
    "\2\13\1\0\4\13\6\0\1\13\6\0\3\13\1\140"+
    "\21\13\1\56\13\0\2\13\1\0\4\13\6\0\1\13"+
    "\6\0\21\13\1\201\3\13\1\56\13\0\2\13\1\0"+
    "\4\13\6\0\1\13\6\0\13\13\1\140\11\13\1\56"+
    "\13\0\2\13\1\0\4\13\6\0\1\13\6\0\7\13"+
    "\1\202\15\13\1\56\13\0\2\13\1\0\4\13\6\0"+
    "\1\13\6\0\2\13\1\203\22\13\1\56\13\0\2\13"+
    "\1\0\4\13\6\0\1\13\6\0\3\13\1\204\21\13"+
    "\1\56\13\0\2\13\1\0\4\13\6\0\1\13\6\0"+
    "\2\13\1\205\22\13\1\56\13\0\2\13\1\0\4\13"+
    "\6\0\1\13\6\0\2\13\1\206\22\13\1\56\13\0"+
    "\2\13\1\0\4\13\6\0\1\13\6\0\1\13\1\207"+
    "\23\13\1\56\13\0\2\13\1\0\4\13\6\0\1\13"+
    "\6\0\2\13\1\210\22\13\1\56\13\0\2\13\1\0"+
    "\4\13\6\0\1\13\6\0\14\13\1\211\10\13\1\56"+
    "\13\0\2\13\1\0\4\13\6\0\1\13\6\0\25\13"+
    "\1\56\13\0\2\13\1\0\1\212\3\13\6\0\1\13"+
    "\6\0\1\13\1\213\23\13\1\56\13\0\2\13\1\0"+
    "\4\13\6\0\1\13\6\0\1\13\1\214\23\13\1\56"+
    "\13\0\2\13\1\0\4\13\6\0\1\13\6\0\16\13"+
    "\1\170\6\13\1\56\13\0\2\13\1\0\4\13\6\0"+
    "\1\13\6\0\4\13\1\57\20\13\1\56\13\0\2\13"+
    "\1\0\4\13\6\0\1\13\6\0\6\13\1\215\16\13"+
    "\1\56\13\0\2\13\1\0\4\13\6\0\1\13\5\0"+
    "\1\123\25\165\1\124\13\123\2\165\1\123\4\165\3\123"+
    "\1\0\2\123\1\166\5\123\1\0\3\13\1\216\21\13"+
    "\1\56\13\0\2\13\1\0\4\13\6\0\1\13\6\0"+
    "\25\13\1\56\13\0\2\13\1\0\4\13\1\175\5\0"+
    "\1\13\6\0\10\13\1\217\14\13\1\56\13\0\2\13"+
    "\1\0\4\13\6\0\1\13\6\0\4\13\1\220\20\13"+
    "\1\56\13\0\2\13\1\0\4\13\6\0\1\13\6\0"+
    "\1\221\24\13\1\56\13\0\2\13\1\0\4\13\6\0"+
    "\1\13\6\0\10\13\1\222\14\13\1\56\13\0\2\13"+
    "\1\0\4\13\6\0\1\13\57\0\1\223\13\0\7\13"+
    "\1\224\15\13\1\56\13\0\2\13\1\0\4\13\6\0"+
    "\1\13\6\0\10\13\1\225\14\13\1\56\13\0\2\13"+
    "\1\0\4\13\6\0\1\13\6\0\22\13\1\142\2\13"+
    "\1\56\13\0\2\13\1\0\4\13\6\0\1\13\6\0"+
    "\5\13\1\226\17\13\1\56\13\0\2\13\1\0\4\13"+
    "\6\0\1\13\6\0\6\13\1\170\16\13\1\56\13\0"+
    "\2\13\1\0\4\13\6\0\1\13\6\0\7\13\1\227"+
    "\15\13\1\56\13\0\2\13\1\0\4\13\6\0\1\13"+
    "\6\0\1\13\1\140\23\13\1\56\13\0\2\13\1\0"+
    "\4\13\6\0\1\13\6\0\23\13\1\230\1\13\1\56"+
    "\13\0\2\13\1\0\4\13\6\0\1\13\6\0\7\13"+
    "\1\231\15\13\1\56\13\0\2\13\1\0\4\13\6\0"+
    "\1\13\6\0\12\13\1\232\12\13\1\56\13\0\2\13"+
    "\1\0\4\13\6\0\1\13\6\0\1\13\1\233\23\13"+
    "\1\56\13\0\2\13\1\0\4\13\6\0\1\13\6\0"+
    "\2\13\1\234\22\13\1\56\13\0\2\13\1\0\4\13"+
    "\6\0\1\13\6\0\4\13\1\235\20\13\1\56\13\0"+
    "\2\13\1\0\4\13\6\0\1\13\6\0\7\13\1\236"+
    "\15\13\1\56\13\0\2\13\1\0\4\13\6\0\1\13"+
    "\6\0\7\13\1\237\15\13\1\56\13\0\2\13\1\0"+
    "\4\13\6\0\1\13\6\0\2\13\1\240\22\13\1\56"+
    "\13\0\2\13\1\0\4\13\6\0\1\13\6\0\1\241"+
    "\24\13\1\56\13\0\2\13\1\0\4\13\6\0\1\13"+
    "\6\0\20\13\1\140\4\13\1\56\13\0\2\13\1\0"+
    "\4\13\6\0\1\13\6\0\11\13\1\242\13\13\1\56"+
    "\13\0\2\13\1\0\4\13\6\0\1\13\6\0\13\13"+
    "\1\243\11\13\1\56\13\0\2\13\1\0\4\13\6\0"+
    "\1\13\6\0\6\13\1\244\16\13\1\56\13\0\2\13"+
    "\1\0\4\13\6\0\1\13\6\0\16\13\1\142\6\13"+
    "\1\56\13\0\2\13\1\0\4\13\6\0\1\13\6\0"+
    "\2\13\1\245\22\13\1\56\13\0\2\13\1\0\4\13"+
    "\6\0\1\13\6\0\1\13\1\246\23\13\1\56\13\0"+
    "\2\13\1\0\4\13\6\0\1\13\6\0\7\13\1\170"+
    "\15\13\1\56\13\0\2\13\1\0\4\13\6\0\1\13"+
    "\6\0\6\13\1\247\16\13\1\56\13\0\2\13\1\0"+
    "\4\13\6\0\1\13\6\0\1\250\24\13\1\56\13\0"+
    "\2\13\1\0\4\13\6\0\1\13\6\0\13\13\1\251"+
    "\11\13\1\56\13\0\2\13\1\0\4\13\6\0\1\13"+
    "\6\0\1\246\24\13\1\56\13\0\2\13\1\0\4\13"+
    "\6\0\1\13\6\0\2\13\1\252\22\13\1\56\13\0"+
    "\2\13\1\0\4\13\6\0\1\13\6\0\7\13\1\253"+
    "\15\13\1\56\13\0\2\13\1\0\4\13\6\0\1\13"+
    "\6\0\5\13\1\170\17\13\1\56\13\0\2\13\1\0"+
    "\4\13\6\0\1\13\6\0\6\13\1\140\16\13\1\56"+
    "\13\0\2\13\1\0\4\13\6\0\1\13\6\0\7\13"+
    "\1\250\15\13\1\56\13\0\2\13\1\0\4\13\6\0"+
    "\1\13\6\0\25\13\1\254\13\0\2\13\1\0\4\13"+
    "\6\0\1\13\6\0\1\127\24\13\1\56\13\0\2\13"+
    "\1\0\4\13\6\0\1\13\6\0\5\13\1\255\17\13"+
    "\1\56\13\0\2\13\1\0\4\13\6\0\1\13\6\0"+
    "\21\131\1\256\2\131\15\0\1\131\2\0\4\131\6\0"+
    "\1\131\6\0\6\13\1\142\16\13\1\56\13\0\2\13"+
    "\1\0\4\13\6\0\1\13\6\0\12\131\1\257\12\131"+
    "\1\56\13\0\2\131\1\0\4\131\6\0\1\131\6\0"+
    "\6\131\1\260\16\131\1\56\13\0\2\131\1\0\4\131"+
    "\6\0\1\131\6\0\25\131\1\261\13\0\2\131\1\0"+
    "\4\131\6\0\1\131\6\0\17\131\1\262\4\131\15\0"+
    "\1\131\2\0\4\131\6\0\1\131\6\0\10\131\1\263"+
    "\14\131\1\56\13\0\2\131\1\0\4\131\6\0\1\131"+
    "\6\0\4\131\1\264\20\131\1\56\13\0\2\131\1\0"+
    "\4\131\6\0\1\131\6\0\5\131\1\265\17\131\1\56"+
    "\13\0\2\131\1\0\4\131\6\0\1\131\6\0\6\131"+
    "\1\266\16\131\1\56\13\0\2\131\1\0\4\131\6\0"+
    "\1\131\6\0\1\131\1\267\23\131\1\56\13\0\2\131"+
    "\1\0\4\131\6\0\1\131\6\0\5\131\1\270\17\131"+
    "\1\56\13\0\2\131\1\0\4\131\6\0\1\131\5\0";

  /** 
   * The transition table of the DFA
   */
  private static final int yytrans [] = yy_unpack();


  /* error codes */
  private static final int YY_UNKNOWN_ERROR = 0;
  private static final int YY_ILLEGAL_STATE = 1;
  private static final int YY_NO_MATCH = 2;
  private static final int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  private static final String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final byte YY_ATTRIBUTE[] = {
     0,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9, 
     9,  1,  9,  9,  1,  9,  9,  9,  9,  9,  1,  1,  1,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  0,  0,  9,  9,  9,  9,  9,  0,  0,  1,  1, 
     1,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1, 
     0,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */

  private Symbol symbol(int sym) {
    return new Symbol(sym, yyline+1, yycolumn+1);
  }
  
  private Symbol symbol(int sym, Object val) {
    return new Symbol(sym, yyline+1, yycolumn+1, val);
  }
  
  private void error(String message) {
    System.out.println("Error at line "+(yyline+1)+", column "+(yycolumn+1)+" : "+message);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[7950];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 95: 
          { return symbol( KEYWORD,yytext()); }
        case 185: break;
        case 35: 
          { return symbol( DELIM,yytext()); }
        case 186: break;
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 29: 
        case 30: 
        case 36: 
        case 42: 
        case 43: 
        case 44: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 78: 
        case 79: 
        case 80: 
        case 85: 
        case 86: 
        case 87: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 94: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 112: 
        case 113: 
        case 114: 
        case 118: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 125: 
        case 126: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 147: 
        case 148: 
        case 149: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 158: 
        case 159: 
        case 161: 
        case 162: 
        case 164: 
        case 165: 
        case 166: 
        case 168: 
        case 169: 
        case 170: 
        case 172: 
          { return symbol(IDENT, yytext()); }
        case 187: break;
        case 41: 
          { return symbol( COMMA,yytext()); }
        case 188: break;
        case 160: 
          { return symbol( STATIC_KEYWORD,yytext()); }
        case 189: break;
        case 1: 
        case 17: 
        case 21: 
        case 22: 
        case 24: 
        case 27: 
          {   /* throw new Error("Illegal character <"+ yytext()+">");*/
        error("Illegal character <"+ yytext()+">");
                   }
        case 190: break;
        case 28: 
          { return symbol( NEG,yytext()); }
        case 191: break;
        case 93: 
        case 119: 
          {  return symbol(TYPE,yytext());  }
        case 192: break;
        case 16: 
          { return symbol( INT_NUMBER,yytext()); }
        case 193: break;
        case 71: 
          {  return symbol( STRING_LITERAL,yytext()); }
        case 194: break;
        case 151: 
          {  return symbol(BREAK_KEYWORD,yytext()); }
        case 195: break;
        case 18: 
        case 19: 
          { return symbol( EXP_OP,yytext()); }
        case 196: break;
        case 51: 
          { return symbol( KEYWORD_IF,yytext()); }
        case 197: break;
        case 20: 
          { return symbol( PLUSSIGN,yytext()); }
        case 198: break;
        case 72: 
          { return symbol( UN_OP,yytext()); }
        case 199: break;
        case 163: 
          { return symbol( IMPORT_KEYWORD,yytext()); }
        case 200: break;
        case 23: 
        case 73: 
          { return symbol( ASS_OP,yytext()); }
        case 201: break;
        case 183: 
          { return symbol(PRINT, yytext()); }
        case 202: break;
        case 40: 
          { return symbol( RPAR,yytext()); }
        case 203: break;
        case 38: 
          { return symbol( RCOL,yytext()); }
        case 204: break;
        case 32: 
          { return symbol( RKEY,yytext()); }
        case 205: break;
        case 146: 
          {  return symbol(VECT_TYPE,yytext()); }
        case 206: break;
        case 167: 
          {  return symbol(ACCESS,yytext()); }
        case 207: break;
        case 25: 
        case 26: 
        case 75: 
          { return symbol( COMP_OP,yytext()); }
        case 208: break;
        case 74: 
          { return symbol( LOG_OP,yytext()); }
        case 209: break;
        case 141: 
          { return symbol( KEYWORD_CLASS,yytext()); }
        case 210: break;
        case 157: 
          { return symbol( KEYWORD_WHILE,yytext()); }
        case 211: break;
        case 33: 
        case 34: 
          {  }
        case 212: break;
        case 39: 
          { return symbol( LPAR,yytext()); }
        case 213: break;
        case 37: 
          { return symbol( LCOL,yytext()); }
        case 214: break;
        case 31: 
          { return symbol( LKEY,yytext()); }
        case 215: break;
        case 84: 
        case 115: 
        case 117: 
          { return symbol(CODE_LITERAL, yytext()); }
        case 216: break;
        case 88: 
        case 116: 
        case 173: 
        case 174: 
        case 175: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
          { return symbol(QUALIFIED,yytext()); }
        case 217: break;
        case 111: 
          { return symbol( REAL_NUMBER,yytext()); }
        case 218: break;
        case 127: 
          { return symbol( BOL_TRUE,yytext()); }
        case 219: break;
        case 150: 
          { return symbol( BOL_FALSE,yytext()); }
        case 220: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
