/*
 * Generated by classgen, version 1.5
 * 11/10/13 6:18 PM
 */
package node;

public class Block implements SyntaxNode {

  private SyntaxNode parent;
  public Dekl_Seq dekl_Seq;
  public Anw_Seq anw_Seq;

  public Block (Dekl_Seq dekl_Seq, Anw_Seq anw_Seq) {
    this.dekl_Seq = dekl_Seq;
    if (dekl_Seq != null) dekl_Seq.setParent(this);
    this.anw_Seq = anw_Seq;
    if (anw_Seq != null) anw_Seq.setParent(this);
  }

  public SyntaxNode getParent() {
    return parent;
  }

  public void setParent(SyntaxNode parent) {
    this.parent = parent;
  }

  public void accept(Visitor visitor) {
    visitor.visit(this);
  }

  public void childrenAccept(Visitor visitor) {
    if (dekl_Seq != null) dekl_Seq.accept(visitor);
    if (anw_Seq != null) anw_Seq.accept(visitor);
  }

  public void traverseTopDown(Visitor visitor) {
    accept(visitor);
    if (dekl_Seq != null) dekl_Seq.traverseTopDown(visitor);
    if (anw_Seq != null) anw_Seq.traverseTopDown(visitor);
  }

  public void traverseBottomUp(Visitor visitor) {
    if (dekl_Seq != null) dekl_Seq.traverseBottomUp(visitor);
    if (anw_Seq != null) anw_Seq.traverseBottomUp(visitor);
    accept(visitor);
  }

  public String toString() {
    return toString("");
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("Block(\n");
      if (dekl_Seq != null)
        buffer.append(dekl_Seq.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (anw_Seq != null)
        buffer.append(anw_Seq.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [Block]");
    return buffer.toString();
  }
}
