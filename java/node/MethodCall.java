/*
 * Generated by classgen, version 1.5
 * 11/26/13 11:02 AM
 */
package node;

public class MethodCall implements SyntaxNode {

  private SyntaxNode parent;
  public String name;
  public String lpar;
  public ParamCallList paramCallList;
  public String rpar;

  public MethodCall (String name, String lpar, ParamCallList paramCallList, String rpar) {
    this.name = name;
    this.lpar = lpar;
    this.paramCallList = paramCallList;
    if (paramCallList != null) paramCallList.setParent(this);
    this.rpar = rpar;
  }

  public SyntaxNode getParent() {
    return parent;
  }

  public void setParent(SyntaxNode parent) {
    this.parent = parent;
  }

  public void accept(Visitor visitor) {
    visitor.visit(this);
  }

  public void childrenAccept(Visitor visitor) {
    if (paramCallList != null) paramCallList.accept(visitor);
  }

  public void traverseTopDown(Visitor visitor) {
    accept(visitor);
    if (paramCallList != null) paramCallList.traverseTopDown(visitor);
  }

  public void traverseBottomUp(Visitor visitor) {
    if (paramCallList != null) paramCallList.traverseBottomUp(visitor);
    accept(visitor);
  }

  public String toString() {
    return toString("");
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("MethodCall(\n");
    buffer.append("  "+tab+name);
    buffer.append("\n");
    buffer.append("  "+tab+lpar);
    buffer.append("\n");
      if (paramCallList != null)
        buffer.append(paramCallList.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append("  "+tab+rpar);
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [MethodCall]");
    return buffer.toString();
  }
}
